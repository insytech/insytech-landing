---

---

<section class="automation-hero">
    <div class="hero-content">
        <div class="content-wrapper">
            <h1>Automatizaci√≥n Inteligente para tu Negocio</h1>
            <p>
                Transforma tus procesos with chatbots, RPA y flujos de
                automatizaci√≥n personalizados. Conecta sistemas, optimiza
                operaciones y escala sin l√≠mites.
            </p>
            <div class="cta-buttons">
                <a href="#cta" class="btn btn-primary">Solicita una demo</a>
                <a href="#services" class="btn btn-secondary">Ver soluciones</a>
            </div>
        </div>
    </div>

    <!-- Flujos de automatizaci√≥n animados -->
    <div class="automation-flows">
        <!-- Flujo principal central -->
        <div class="flow-container main-flow">
            <div
                id="node-trigger"
                class="flow-node trigger-node"
                data-animate="scale"
                data-animate-delay="0.3s"
            >
                <div class="node-icon">‚ö°</div>
                <span class="node-label">Trigger</span>
            </div>

            <svg
                class="connection-line"
                data-animate="fade"
                data-animate-delay="0.6s"
            >
                <line x1="0" y1="50%" x2="100%" y2="50%" class="animated-line"
                ></line>
            </svg>

            <div
                id="node-ai"
                class="flow-node ai-node"
                data-animate="scale"
                data-animate-delay="0.9s"
            >
                <div class="node-icon">ü§ñ</div>
                <span class="node-label">AI Agent</span>
            </div>

            <svg
                class="connection-line"
                data-animate="fade"
                data-animate-delay="1.2s"
            >
                <line x1="0" y1="50%" x2="100%" y2="50%" class="animated-line"
                ></line>
            </svg>

            <div
                id="node-action"
                class="flow-node action-node"
                data-animate="scale"
                data-animate-delay="1.5s"
            >
                <div class="node-icon">‚öôÔ∏è</div>
                <span class="node-label">Acci√≥n</span>
            </div>
        </div>

        <!-- Flujo secundario superior -->
        <div class="flow-container secondary-flow top-flow">
            <div
                id="node-email"
                class="flow-node small-node"
                data-animate="fade-up"
                data-animate-delay="0.5s"
            >
                <div class="node-icon">üìß</div>
                <span class="node-label">Email</span>
            </div>

            <svg class="connection-curve">
                <path d="M 10 20 Q 60 5 110 20" class="curved-line"></path>
            </svg>

            <div
                id="node-chat"
                class="flow-node small-node"
                data-animate="fade-up"
                data-animate-delay="0.8s"
            >
                <div class="node-icon">üí¨</div>
                <span class="node-label">Chat</span>
            </div>
        </div>

        <!-- Flujo secundario inferior -->
        <div class="flow-container secondary-flow bottom-flow">
            <div
                id="node-crm"
                class="flow-node small-node"
                data-animate="fade-up"
                data-animate-delay="0.7s"
            >
                <div class="node-icon">üìä</div>
                <span class="node-label">CRM</span>
            </div>

            <svg class="connection-curve">
                <path d="M 10 10 Q 60 25 110 10" class="curved-line"></path>
            </svg>

            <div
                id="node-notify"
                class="flow-node small-node"
                data-animate="fade-up"
                data-animate-delay="1s"
            >
                <div class="node-icon">üîî</div>
                <span class="node-label">Notify</span>
            </div>
        </div>

        <!-- Nodos flotantes (usados como destinos del flujo) -->
        <div class="floating-nodes">
            <div
                id="node-api"
                class="floating-node node-1"
                data-animate="scale"
                data-animate-delay="1.8s"
            >
                <div class="node-icon">üåê</div>
                <span class="node-label">API</span>
            </div>

            <div
                id="node-whatsapp"
                class="floating-node node-2"
                data-animate="scale"
                data-animate-delay="2.1s"
            >
                <div class="node-icon">üì±</div>
                <span class="node-label">WhatsApp</span>
            </div>

            <div
                id="node-targeting"
                class="floating-node node-4"
                data-animate="scale"
                data-animate-delay="2.7s"
            >
                <div class="node-icon">üéØ</div>
                <span class="node-label">Targeting</span>
            </div>

            <div
                id="node-forms"
                class="floating-node node-3"
                data-animate="scale"
                data-animate-delay="2.4s"
            >
                <div class="node-icon">üìã</div>
                <span class="node-label">Forms</span>
            </div>
        </div>

        <!-- Conexiones din√°micas dibujadas por JavaScript -->
        <svg
            id="dynamic-connections"
            class="dynamic-connections"
            viewBox="0 0 100 100"
            preserveAspectRatio="none"></svg>
    </div>

    <!-- Part√≠culas de fondo -->
    <div class="background-particles">
        <div class="particle particle-1"></div>
        <div class="particle particle-2"></div>
        <div class="particle particle-3"></div>
        <div class="particle particle-4"></div>
        <div class="particle particle-5"></div>
    </div>

    <!-- Runner Bot mejorado -->
    <div
        id="runner"
        class="runner"
        aria-hidden="true"
        title="Bot Automatizador"
    >
        <svg
            class="bot-svg"
            width="52"
            height="52"
            viewBox="0 0 52 52"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <!-- Glow background -->
            <circle cx="26" cy="26" r="24" fill="url(#botGlow)" opacity="0.4"
            ></circle>

            <!-- Propulsi√≥n (visible durante movimiento) -->
            <g class="thruster" opacity="0">
                <path d="M26 42 L20 50 L26 47 L32 50 Z" fill="url(#thrustGrad)">
                    <animate
                        attributeName="opacity"
                        values="0;1;0.3;1;0"
                        dur="0.6s"
                        repeatCount="indefinite"></animate>
                </path>
                <path
                    d="M26 44 L22 49 L26 47.5 L30 49 Z"
                    fill="url(#thrustGrad2)"
                    opacity="0.7"
                >
                    <animate
                        attributeName="opacity"
                        values="0;0.8;0.2;0.8;0"
                        dur="0.8s"
                        repeatCount="indefinite"></animate>
                </path>
            </g>

            <!-- Antena con se√±al -->
            <line
                x1="26"
                y1="8"
                x2="26"
                y2="4"
                stroke="url(#antennaGrad)"
                stroke-width="2.5"
                stroke-linecap="round"></line>
            <circle cx="26" cy="3" r="2.5" fill="#00b5e2">
                <animate
                    attributeName="opacity"
                    values="1;0.4;1"
                    dur="1.5s"
                    repeatCount="indefinite"></animate>
            </circle>
            <!-- Ondas de se√±al -->
            <g class="signal-waves" opacity="0.6">
                <circle
                    cx="26"
                    cy="3"
                    r="5"
                    fill="none"
                    stroke="#00b5e2"
                    stroke-width="1"
                    opacity="0.8"
                >
                    <animate
                        attributeName="r"
                        values="3;8;3"
                        dur="2s"
                        repeatCount="indefinite"></animate>
                    <animate
                        attributeName="opacity"
                        values="0.8;0;0.8"
                        dur="2s"
                        repeatCount="indefinite"></animate>
                </circle>
                <circle
                    cx="26"
                    cy="3"
                    r="5"
                    fill="none"
                    stroke="#06ffa5"
                    stroke-width="1"
                    opacity="0.6"
                >
                    <animate
                        attributeName="r"
                        values="3;10;3"
                        dur="2.5s"
                        repeatCount="indefinite"></animate>
                    <animate
                        attributeName="opacity"
                        values="0.6;0;0.6"
                        dur="2.5s"
                        repeatCount="indefinite"></animate>
                </circle>
            </g>

            <!-- Cuerpo principal -->
            <rect
                x="12"
                y="12"
                width="28"
                height="24"
                rx="10"
                fill="url(#bodyGrad)"
                stroke="url(#strokeGrad)"
                stroke-width="2.5"></rect>

            <!-- Pantalla/visor -->
            <rect
                x="16"
                y="16"
                width="20"
                height="16"
                rx="6"
                fill="#0A1931"
                stroke="url(#screenGrad)"
                stroke-width="1"></rect>

            <!-- Ojos con animaci√≥n -->
            <g class="eyes">
                <circle cx="21" cy="24" r="3.5" fill="#0A1931"></circle>
                <circle cx="31" cy="24" r="3.5" fill="#0A1931"></circle>
                <circle class="eyeL" cx="21" cy="24" r="2" fill="#06ffa5">
                    <animate
                        attributeName="opacity"
                        values="1;1;0.2;1"
                        keyTimes="0;0.8;0.85;1"
                        dur="3s"
                        repeatCount="indefinite"></animate>
                </circle>
                <circle class="eyeR" cx="31" cy="24" r="2" fill="#06ffa5">
                    <animate
                        attributeName="opacity"
                        values="1;1;0.2;1"
                        keyTimes="0;0.75;0.8;1"
                        dur="3s"
                        repeatCount="indefinite"></animate>
                </circle>
                <!-- Puntos de brillo en los ojos -->
                <circle cx="22" cy="23" r="0.8" fill="#ffffff" opacity="0.9"
                ></circle>
                <circle cx="32" cy="23" r="0.8" fill="#ffffff" opacity="0.9"
                ></circle>
            </g>

            <!-- Indicador de actividad -->
            <rect
                x="18"
                y="28"
                width="16"
                height="2"
                rx="1"
                fill="url(#activityGrad)"
            >
                <animate
                    attributeName="width"
                    values="2;16;2"
                    dur="1.8s"
                    repeatCount="indefinite"></animate>
                <animate
                    attributeName="x"
                    values="25;18;25"
                    dur="1.8s"
                    repeatCount="indefinite"></animate>
            </rect>

            <!-- Brazos/extensiones laterales -->
            <rect
                x="8"
                y="20"
                width="4"
                height="8"
                rx="2"
                fill="url(#armGrad)"
                opacity="0.8"></rect>
            <rect
                x="40"
                y="20"
                width="4"
                height="8"
                rx="2"
                fill="url(#armGrad)"
                opacity="0.8"></rect>

            <!-- Definiciones de gradientes -->
            <defs>
                <radialGradient id="botGlow" cx="0.5" cy="0.5" r="0.5">
                    <stop offset="0%" stop-color="#0066ff" stop-opacity="0.8"
                    ></stop>
                    <stop offset="70%" stop-color="#00b5e2" stop-opacity="0.3"
                    ></stop>
                    <stop offset="100%" stop-color="#06ffa5" stop-opacity="0"
                    ></stop>
                </radialGradient>

                <linearGradient id="bodyGrad" x1="12" y1="12" x2="40" y2="36">
                    <stop offset="0%" stop-color="#0066ff"></stop>
                    <stop offset="50%" stop-color="#0052cc"></stop>
                    <stop offset="100%" stop-color="#00b5e2"></stop>
                </linearGradient>

                <linearGradient id="strokeGrad" x1="12" y1="12" x2="40" y2="36">
                    <stop offset="0%" stop-color="#4da6ff"></stop>
                    <stop offset="100%" stop-color="#00d4ff"></stop>
                </linearGradient>

                <linearGradient id="screenGrad" x1="16" y1="16" x2="36" y2="32">
                    <stop offset="0%" stop-color="#00b5e2" stop-opacity="0.3"
                    ></stop>
                    <stop offset="100%" stop-color="#06ffa5" stop-opacity="0.1"
                    ></stop>
                </linearGradient>

                <linearGradient id="antennaGrad" x1="26" y1="4" x2="26" y2="8">
                    <stop offset="0%" stop-color="#06ffa5"></stop>
                    <stop offset="100%" stop-color="#00b5e2"></stop>
                </linearGradient>

                <linearGradient id="thrustGrad" x1="26" y1="42" x2="26" y2="50">
                    <stop offset="0%" stop-color="#06ffa5"></stop>
                    <stop offset="50%" stop-color="#00b5e2"></stop>
                    <stop offset="100%" stop-color="#0066ff"></stop>
                </linearGradient>

                <linearGradient
                    id="thrustGrad2"
                    x1="26"
                    y1="44"
                    x2="26"
                    y2="49"
                >
                    <stop offset="0%" stop-color="#ffffff"></stop>
                    <stop offset="100%" stop-color="#06ffa5"></stop>
                </linearGradient>

                <linearGradient
                    id="activityGrad"
                    x1="18"
                    y1="28"
                    x2="34"
                    y2="30"
                >
                    <stop offset="0%" stop-color="#06ffa5"></stop>
                    <stop offset="50%" stop-color="#00b5e2"></stop>
                    <stop offset="100%" stop-color="#0066ff"></stop>
                </linearGradient>

                <linearGradient id="armGrad" x1="8" y1="20" x2="44" y2="28">
                    <stop offset="0%" stop-color="#0052cc"></stop>
                    <stop offset="100%" stop-color="#00b5e2"></stop>
                </linearGradient>
            </defs>
        </svg>

        <!-- Estado del bot -->
        <div class="bot-status">
            <div class="status-dot"></div>
            <span class="status-text">Procesando...</span>
        </div>
    </div>
</section>

<script>
    // Animaci√≥n mejorada con conexiones din√°micas y runner bot
    document.addEventListener("DOMContentLoaded", () => {
        const container = document.querySelector(".automation-hero");
        const svg = document.getElementById("dynamic-connections");
        const runner = document.getElementById("runner");

        if (!container || !svg || !runner) return;

        const flow = [
            "node-trigger",
            "node-ai",
            "node-action",
            "node-email",
            "node-chat",
            "node-crm",
            "node-api",
            "node-whatsapp",
            "node-targeting",
            "node-forms",
            "node-notify",
            "node-trigger",
        ];

        const nodes = Object.fromEntries(
            flow
                .map((id) => [id, document.getElementById(id)])
                .filter(([id, el]) => el),
        );

        const getRect = (el) => el.getBoundingClientRect();
        const getContainerRect = () => container.getBoundingClientRect();

        // CORREGIR: Funci√≥n center mejorada
        const center = (el) => {
            const containerRect = getContainerRect();
            const elRect = getRect(el);
            return {
                x: elRect.left - containerRect.left + elRect.width / 2,
                y: elRect.top - containerRect.top + elRect.height / 2,
            };
        };

        // CORREGIR: Funci√≥n simple para mostrar l√≠nea de movimiento
        let currentTrail = null;

        const createMovementTrail = (fromNode, toNode) => {
            // Limpiar l√≠nea anterior
            if (currentTrail) {
                currentTrail.remove();
                currentTrail = null;
            }

            const fromPos = center(fromNode);
            const toPos = center(toNode);

            // Crear una l√≠nea simple con CSS
            const trail = document.createElement("div");
            trail.className = "movement-trail";

            // Calcular √°ngulo y distancia
            const dx = toPos.x - fromPos.x;
            const dy = toPos.y - fromPos.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const angle = (Math.atan2(dy, dx) * 180) / Math.PI;

            // Posicionar la l√≠nea
            trail.style.left = `${fromPos.x}px`;
            trail.style.top = `${fromPos.y}px`;
            trail.style.width = `${distance}px`;
            trail.style.transform = `rotate(${angle}deg)`;
            trail.style.transformOrigin = "0 50%";

            container.appendChild(trail);
            currentTrail = trail;

            // Animar la l√≠nea
            setTimeout(() => trail.classList.add("active"), 10);

            return trail;
        };

        // CORREGIR: Funciones del runner con mejor precisi√≥n
        const setRunnerPosition = (x, y) => {
            runner.style.left = `${x}px`;
            runner.style.top = `${y}px`;
            runner.style.transform = `translate(-50%, -50%)`;
        };

        const setRunnerDirection = (dx, dy) => {
            const angle = Math.atan2(dy, dx);
            runner.style.setProperty("--rotation", `${angle}rad`);
        };

        const moveRunner = (fromId, toId, speed = 600) => {
            return new Promise((resolve) => {
                const fromNode = nodes[fromId];
                const toNode = nodes[toId];
                if (!fromNode || !toNode) return resolve();

                // Crear l√≠nea de movimiento
                const trail = createMovementTrail(fromNode, toNode);

                const fromPos = center(fromNode);
                const toPos = center(toNode);
                const dx = toPos.x - fromPos.x;
                const dy = toPos.y - fromPos.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                setRunnerDirection(dx, dy);

                const duration = Math.max(400, (distance / speed) * 1000);
                const startTime = performance.now();

                runner.classList.add("moving");

                const animate = (currentTime) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);

                    const eased =
                        progress < 0.5
                            ? 2 * progress * progress
                            : 1 - Math.pow(-2 * progress + 2, 3) / 2;

                    const currentX = fromPos.x + dx * eased;
                    const currentY = fromPos.y + dy * eased;

                    setRunnerPosition(currentX, currentY);

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        runner.classList.remove("moving");
                        // Ocultar l√≠nea despu√©s del movimiento
                        setTimeout(() => {
                            if (trail) trail.classList.remove("active");
                        }, 200);
                        resolve();
                    }
                };

                requestAnimationFrame(animate);
            });
        };

        const pressNode = async (nodeId) => {
            const node = nodes[nodeId];
            if (!node) return;

            node.classList.add("pressed");
            await new Promise((resolve) => setTimeout(resolve, 300));
            node.classList.remove("pressed");
        };

        // CORREGIR: Loop principal simplificado
        const runFlowLoop = async () => {
            const firstNode = nodes[flow[0]];
            if (firstNode) {
                const pos = center(firstNode);
                setRunnerPosition(pos.x, pos.y);
                await pressNode(flow[0]);
            }

            while (true) {
                for (let i = 0; i < flow.length - 1; i++) {
                    const fromId = flow[i];
                    const toId = flow[i + 1];

                    await moveRunner(fromId, toId);
                    await pressNode(toId);
                    await new Promise((resolve) => setTimeout(resolve, 300));
                }
            }
        };

        // Inicializar sin conexiones complejas
        runFlowLoop();

        // Actualizar en resize
        let resizeTimeout;
        window.addEventListener("resize", () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                const firstNode = nodes[flow[0]];
                if (firstNode) {
                    const pos = center(firstNode);
                    setRunnerPosition(pos.x, pos.y);
                }
            }, 100);
        });
    });
</script>

<style>
    :root {
        --primary: #0066ff;
        --accent: #00b5e2;
        --success: #06ffa5;
    }

    .automation-hero {
        position: relative;
        min-height: 100vh;
        background: linear-gradient(
            135deg,
            #0f0f23 0%,
            #1a1a3e 50%,
            #2d1b69 100%
        );
        overflow: hidden;
        display: flex;
        align-items: center;
        color: white;
    }

    .hero-content {
        position: relative;
        z-index: 10;
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .content-wrapper {
        max-width: 600px;
    }

    .hero-content h1 {
        font-size: clamp(2.5rem, 5vw, 4rem);
        font-weight: 800;
        margin-bottom: 1.5rem;
        background: linear-gradient(135deg, #ffffff 0%, #a78bfa 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        line-height: 1.1;
    }

    .hero-content p {
        font-size: 1.2rem;
        line-height: 1.6;
        margin-bottom: 2rem;
        color: #e2e8f0;
    }

    .cta-buttons {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .btn-primary {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        color: white;
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 35px rgba(99, 102, 241, 0.4);
    }

    .btn-secondary {
        background: transparent;
        color: white;
        border-color: rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(10px);
    }

    .btn-secondary:hover {
        background: rgba(255, 255, 255, 0.1);
        border-color: rgba(255, 255, 255, 0.5);
        transform: translateY(-2px);
    }

    /* Flujos de automatizaci√≥n */
    .automation-flows {
        position: absolute;
        top: 0;
        right: 0;
        width: 50%;
        height: 100%;
        pointer-events: none;
        z-index: 5;
    }

    .flow-container {
        position: absolute;
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .main-flow {
        top: 50%;
        right: 10%;
        transform: translateY(-50%);
        flex-direction: row;
    }

    .top-flow {
        top: 20%;
        right: 15%;
        transform: translateY(-50%);
    }

    .bottom-flow {
        top: 80%;
        right: 15%;
        transform: translateY(-50%);
    }

    .flow-node {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid rgba(139, 92, 246, 0.3);
        border-radius: 16px;
        backdrop-filter: blur(20px);
        min-width: 80px;
        transition: all 0.3s ease;
    }

    .flow-node:hover {
        transform: scale(1.05);
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(139, 92, 246, 0.5);
    }

    .small-node {
        min-width: 60px;
        padding: 0.75rem;
    }

    .node-icon {
        font-size: 1.5rem;
        margin-bottom: 0.25rem;
    }

    .small-node .node-icon {
        font-size: 1.2rem;
    }

    .node-label {
        font-size: 0.75rem;
        font-weight: 600;
        text-align: center;
        color: #e2e8f0;
    }

    .connection-line {
        width: 100px;
        height: 4px;
    }

    .connection-curve {
        width: 120px;
        height: 30px;
    }

    .animated-line,
    .curved-line {
        stroke: #8b5cf6;
        stroke-width: 2;
        fill: none;
        opacity: 0.7;
    }

    .bg-line {
        stroke: #6366f1;
        stroke-width: 1;
        fill: none;
    }

    .flow-dot,
    .flow-dot-small {
        fill: #06ffa5;
        filter: drop-shadow(0 0 6px #06ffa5);
    }

    /* Nodos flotantes */
    .floating-nodes {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    .floating-node {
        position: absolute;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
        padding: 0.75rem;
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(139, 92, 246, 0.2);
        border-radius: 12px;
        backdrop-filter: blur(15px);
        min-width: 50px;
        animation: float 6s ease-in-out infinite;
    }

    .node-1 {
        top: 15%;
        left: 20%;
        animation-delay: 0s;
    }

    .node-2 {
        top: 65%;
        left: 10%;
        animation-delay: 1s;
    }

    .node-3 {
        top: 35%;
        left: 80%;
        animation-delay: 2s;
    }

    .node-4 {
        top: 85%;
        left: 70%;
        animation-delay: 3s;
    }

    .floating-node .node-icon {
        font-size: 1rem;
    }

    .floating-node .node-label {
        font-size: 0.6rem;
    }

    @keyframes float {
        0%,
        100% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-10px);
        }
    }

    /* Conexiones din√°micas mejoradas */
    .dynamic-connections {
        position: absolute;
        inset: 0;
        z-index: 4;
        pointer-events: none;
        filter: drop-shadow(0 0 8px rgba(0, 102, 255, 0.3));
    }

    .connection-path {
        stroke: var(--primary) !important;
        stroke-width: 3 !important;
        stroke-linecap: round !important;
        stroke-linejoin: round !important;
        fill: none !important;
        opacity: 0.6 !important;
        stroke-dasharray: 8 12 !important;
        animation: connectionFlow 3s linear infinite !important;
        transition: all 0.3s ease !important;
    }

    .connection-path.active {
        stroke: var(--accent) !important;
        stroke-width: 4 !important;
        opacity: 1 !important;
        filter: drop-shadow(0 0 12px rgba(0, 181, 226, 0.8)) !important;
        animation-duration: 1.5s !important;
    }

    /* CORREGIR: Asegurar que las l√≠neas din√°micas no interfieran con las est√°ticas */
    .animated-line,
    .curved-line {
        stroke: var(--primary);
        stroke-width: 2;
        opacity: 0.4;
        stroke-linecap: round;
        stroke-dasharray: 6 8;
        animation: lineFlow 2.5s linear infinite;
        filter: drop-shadow(0 0 6px rgba(0, 102, 255, 0.2));
    }

    /* Runner bot mejorado */
    .runner {
        position: absolute;
        width: 60px;
        height: 60px;
        z-index: 10;
        pointer-events: none;
        /* Remover transform inicial para usar left/top directamente */
        left: -9999px;
        top: -9999px;
        filter: drop-shadow(0 8px 25px rgba(0, 102, 255, 0.4));
        transform-origin: 50% 50%;
    }

    .bot-svg {
        width: 100%;
        height: 100%;
        transform-origin: center;
        transform: rotate(var(--rotation, 0));
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .runner.moving .thruster {
        opacity: 1 !important;
    }

    .runner.moving .signal-waves {
        opacity: 1 !important;
    }

    .bot-status {
        position: absolute;
        bottom: -25px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        gap: 4px;
        font-size: 10px;
        color: var(--accent);
        font-weight: 600;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .runner.moving .bot-status {
        opacity: 1;
    }

    .status-dot {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background: var(--success);
        animation: pulse 1s infinite;
    }

    @keyframes pulse {
        0%,
        100% {
            opacity: 1;
            transform: scale(1);
        }
        50% {
            opacity: 0.5;
            transform: scale(1.2);
        }
    }

    /* Mejoras en l√≠neas existentes */
    .animated-line,
    .curved-line {
        stroke: var(--primary);
        stroke-width: 4;
        opacity: 0.8;
        stroke-linecap: round;
        stroke-dasharray: 6 8;
        animation: lineFlow 2.5s linear infinite;
        filter: drop-shadow(0 0 6px rgba(0, 102, 255, 0.4));
    }

    /* Efecto de nodo presionado mejorado */
    .flow-node.pressed {
        transform: scale(0.95);
        border-color: var(--accent);
        box-shadow:
            0 0 0 4px rgba(0, 181, 226, 0.3),
            0 0 20px rgba(0, 181, 226, 0.6);
    }

    .flow-node.pressed::after {
        content: "";
        position: absolute;
        inset: -8px;
        border-radius: 20px;
        border: 2px solid var(--success);
        opacity: 0.8;
        animation: pressRing 0.4s ease-out;
    }

    @keyframes pressRing {
        from {
            opacity: 0.8;
            transform: scale(0.8);
            border-width: 3px;
        }
        to {
            opacity: 0;
            transform: scale(1.3);
            border-width: 1px;
        }
    }

    /* Responsive */
    @media (max-width: 1024px) {
        .automation-flows {
            width: 60%;
        }

        .main-flow {
            right: 5%;
            gap: 1rem;
        }

        .connection-line {
            width: 60px;
        }
    }

    @media (max-width: 768px) {
        .automation-hero {
            min-height: 80vh;
        }

        .automation-flows {
            width: 100%;
            opacity: 0.3;
        }

        .hero-content {
            text-align: center;
        }

        .content-wrapper {
            max-width: 100%;
        }

        .cta-buttons {
            justify-content: center;
        }

        .floating-node {
            display: none;
        }
    }

    /* Ajuste de l√≠neas y nodos a marca */
    .animated-line,
    .curved-line {
        stroke: var(--primary);
    }
    .bg-line {
        stroke: color-mix(in srgb, var(--primary) 65%, white);
    }
    .flow-node {
        border-color: color-mix(in srgb, var(--primary) 45%, transparent);
        box-shadow: 0 8px 28px rgba(0, 102, 255, 0.12);
    }
    .flow-node:hover {
        border-color: var(--primary);
        box-shadow: 0 10px 32px rgba(0, 102, 255, 0.18);
    }

    /* Runner (duende operador) */
    .runner {
        position: absolute;
        width: 60px;
        height: 60px;
        z-index: 10;
        pointer-events: none;
        transform: translate(-9999px, -9999px) translate(-50%, -50%);
        filter: drop-shadow(0 8px 25px rgba(0, 102, 255, 0.4));
    }

    /* Efecto ‚Äúpress‚Äù en nodo */
    .flow-node.pressed {
        transform: scale(0.95);
        border-color: var(--accent);
        box-shadow:
            0 0 0 4px rgba(0, 181, 226, 0.3),
            0 0 20px rgba(0, 181, 226, 0.6);
    }
    .flow-node.pressed::after {
        content: "";
        position: absolute;
        inset: -8px;
        border-radius: 20px;
        border: 2px solid var(--success);
        opacity: 0.8;
        animation: pressRing 0.4s ease-out;
    }
    @keyframes pressRing {
        from {
            opacity: 0.8;
            transform: scale(0.8);
            border-width: 3px;
        }
        to {
            opacity: 0;
            transform: scale(1.3);
            border-width: 1px;
        }
    }

    /* NUEVO: L√≠nea de movimiento simple con CSS */
    .movement-trail {
        position: absolute;
        height: 3px;
        background: linear-gradient(
            90deg,
            var(--accent) 0%,
            var(--primary) 50%,
            var(--accent) 100%
        );
        border-radius: 2px;
        opacity: 0;
        z-index: 6;
        pointer-events: none;
        box-shadow: 0 0 8px rgba(0, 181, 226, 0.6);
        transition: opacity 0.3s ease;
    }

    .movement-trail.active {
        opacity: 1;
        animation: trailPulse 1s ease-in-out;
    }

    @keyframes trailPulse {
        0%,
        100% {
            transform: scaleY(1);
            box-shadow: 0 0 8px rgba(0, 181, 226, 0.6);
        }
        50% {
            transform: scaleY(1.5);
            box-shadow: 0 0 16px rgba(0, 181, 226, 0.8);
        }
    }
</style>

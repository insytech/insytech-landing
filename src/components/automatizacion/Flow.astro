---
import FlowNode from "@components/shared/FlowNode.astro";
import RunnerBot from "./RunnerBot.astro";

export interface Props {}

const {} = Astro.props;
---

<div class="automation-flows">
    <!-- Flujo principal central -->
    <div class="flow-container main-flow">
        <FlowNode
            id="node-trigger"
            icon="⚡"
            label="Trigger"
            className="trigger-node"
            animateType="scale"
            animateDelay="0.3s"
        />

        <svg
            class="connection-line"
            data-animate="fade"
            data-animate-delay="0.6s"
        >
            <line x1="0" y1="50%" x2="100%" y2="50%" class="animated-line"
            ></line>
        </svg>

        <FlowNode
            id="node-ai"
            icon="🤖"
            label="AI Agent"
            className="ai-node"
            animateType="scale"
            animateDelay="0.9s"
        />

        <svg
            class="connection-line"
            data-animate="fade"
            data-animate-delay="1.2s"
        >
            <line x1="0" y1="50%" x2="100%" y2="50%" class="animated-line"
            ></line>
        </svg>

        <FlowNode
            id="node-action"
            icon="⚙️"
            label="Acción"
            className="action-node"
            animateType="scale"
            animateDelay="1.5s"
        />
    </div>

    <!-- Flujo secundario superior -->
    <div class="flow-container secondary-flow top-flow">
        <FlowNode
            id="node-email"
            icon="📧"
            label="Email"
            size="small"
            animateType="fade-up"
            animateDelay="0.5s"
        />

        <svg class="connection-curve">
            <path d="M 10 20 Q 60 5 110 20" class="curved-line"></path>
        </svg>

        <FlowNode
            id="node-chat"
            icon="💬"
            label="Chat"
            size="small"
            animateType="fade-up"
            animateDelay="0.8s"
        />
    </div>

    <!-- Flujo secundario inferior -->
    <div class="flow-container secondary-flow bottom-flow">
        <FlowNode
            id="node-crm"
            icon="📊"
            label="CRM"
            size="small"
            animateType="fade-up"
            animateDelay="0.7s"
        />

        <svg class="connection-curve">
            <path d="M 10 10 Q 60 25 110 10" class="curved-line"></path>
        </svg>

        <FlowNode
            id="node-notify"
            icon="🔔"
            label="Notify"
            size="small"
            animateType="fade-up"
            animateDelay="1s"
        />
    </div>

    <!-- Nodos flotantes -->
    <div class="floating-nodes">
        <FlowNode
            id="node-api"
            icon="🌐"
            label="API"
            className="floating-node node-1"
            animateType="scale"
            animateDelay="1.8s"
        />

        <FlowNode
            id="node-whatsapp"
            icon="📱"
            label="WhatsApp"
            className="floating-node node-2"
            animateType="scale"
            animateDelay="2.1s"
        />

        <FlowNode
            id="node-targeting"
            icon="🎯"
            label="Targeting"
            className="floating-node node-4"
            animateType="scale"
            animateDelay="2.7s"
        />

        <FlowNode
            id="node-forms"
            icon="📋"
            label="Forms"
            className="floating-node node-3"
            animateType="scale"
            animateDelay="2.4s"
        />
    </div>
</div>

<RunnerBot />

<script>
    // Animación mejorada con conexiones dinámicas y runner bot
    document.addEventListener("DOMContentLoaded", () => {
        const container = document.querySelector(".automation-hero");
        const runner = document.getElementById("runner");

        if (!container || !runner) return;

        const flow = [
            "node-trigger",
            "node-ai",
            "node-action",
            "node-email",
            "node-chat",
            "node-crm",
            "node-api",
            "node-whatsapp",
            "node-targeting",
            "node-forms",
            "node-notify",
            "node-trigger",
        ];

        const nodes = Object.fromEntries(
            flow
                .map((id) => [id, document.getElementById(id)])
                .filter(([id, el]) => el),
        );

        const getRect = (el) => el.getBoundingClientRect();
        const getContainerRect = () => container.getBoundingClientRect();

        // CORREGIR: Función center mejorada
        const center = (el) => {
            const containerRect = getContainerRect();
            const elRect = getRect(el);
            return {
                x: elRect.left - containerRect.left + elRect.width / 2,
                y: elRect.top - containerRect.top + elRect.height / 2,
            };
        };

        // CORREGIR: Función simple para mostrar línea de movimiento
        let currentTrail = null;

        const createMovementTrail = (fromNode, toNode) => {
            // Limpiar línea anterior
            if (currentTrail) {
                currentTrail.remove();
                currentTrail = null;
            }

            const fromPos = center(fromNode);
            const toPos = center(toNode);

            // Crear una línea simple con CSS
            const trail = document.createElement("div");
            trail.className = "movement-trail";

            // Calcular ángulo y distancia
            const dx = toPos.x - fromPos.x;
            const dy = toPos.y - fromPos.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const angle = (Math.atan2(dy, dx) * 180) / Math.PI;

            // Posicionar la línea
            trail.style.left = `${fromPos.x}px`;
            trail.style.top = `${fromPos.y}px`;
            trail.style.width = `${distance}px`;
            trail.style.transform = `rotate(${angle}deg)`;
            trail.style.transformOrigin = "0 50%";

            container.appendChild(trail);
            currentTrail = trail;

            // Animar la línea
            setTimeout(() => trail.classList.add("active"), 10);

            return trail;
        };

        // CORREGIR: Funciones del runner con mejor precisión
        const setRunnerPosition = (x, y) => {
            runner.style.left = `${x}px`;
            runner.style.top = `${y}px`;
            runner.style.transform = `translate(-50%, -50%)`;
        };

        const setRunnerDirection = (dx, dy) => {
            const angle = Math.atan2(dy, dx);
            runner.style.setProperty("--rotation", `${angle}rad`);
        };

        const moveRunner = (fromId, toId, speed = 600) => {
            return new Promise((resolve) => {
                const fromNode = nodes[fromId];
                const toNode = nodes[toId];
                if (!fromNode || !toNode) return resolve();

                // Crear línea de movimiento
                const trail = createMovementTrail(fromNode, toNode);

                const fromPos = center(fromNode);
                const toPos = center(toNode);
                const dx = toPos.x - fromPos.x;
                const dy = toPos.y - fromPos.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                setRunnerDirection(dx, dy);

                const duration = Math.max(400, (distance / speed) * 1000);
                const startTime = performance.now();

                runner.classList.add("moving");

                const animate = (currentTime) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);

                    const eased =
                        progress < 0.5
                            ? 2 * progress * progress
                            : 1 - Math.pow(-2 * progress + 2, 3) / 2;

                    const currentX = fromPos.x + dx * eased;
                    const currentY = fromPos.y + dy * eased;

                    setRunnerPosition(currentX, currentY);

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        runner.classList.remove("moving");
                        // Ocultar línea después del movimiento
                        setTimeout(() => {
                            if (trail) trail.classList.remove("active");
                        }, 200);
                        resolve();
                    }
                };

                requestAnimationFrame(animate);
            });
        };

        const pressNode = async (nodeId) => {
            const node = nodes[nodeId];
            if (!node) return;

            node.classList.add("pressed");
            await new Promise((resolve) => setTimeout(resolve, 300));
            node.classList.remove("pressed");
        };

        // CORREGIR: Loop principal simplificado
        const runFlowLoop = async () => {
            const firstNode = nodes[flow[0]];
            if (firstNode) {
                const pos = center(firstNode);
                setRunnerPosition(pos.x, pos.y);
                await pressNode(flow[0]);
            }

            while (true) {
                for (let i = 0; i < flow.length - 1; i++) {
                    const fromId = flow[i];
                    const toId = flow[i + 1];

                    await moveRunner(fromId, toId);
                    await pressNode(toId);
                    await new Promise((resolve) => setTimeout(resolve, 300));
                }
            }
        };

        // Inicializar sin conexiones complejas
        runFlowLoop();

        // Actualizar en resize
        let resizeTimeout;
        window.addEventListener("resize", () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                const firstNode = nodes[flow[0]];
                if (firstNode) {
                    const pos = center(firstNode);
                    setRunnerPosition(pos.x, pos.y);
                }
            }, 100);
        });
    });
</script>

<style>
    :root {
        --primary: #0066ff;
        --accent: #00b5e2;
        --success: #06ffa5;
    }

    /* Flujos de automatización */
    .automation-flows {
        position: absolute;
        top: 4em;
        right: 0;
        width: 50%;
        height: 80%;
        pointer-events: none;
        z-index: 5;
    }

    .flow-container {
        position: absolute;
        display: flex;
        align-items: center;
        gap: 2rem;
    }

    .main-flow {
        top: 50%;
        right: 10%;
        transform: translateY(-50%);
        flex-direction: row;
    }

    .top-flow {
        top: 20%;
        right: 15%;
        transform: translateY(-50%);
    }

    .bottom-flow {
        top: 80%;
        right: 15%;
        transform: translateY(-50%);
    }

    .connection-line {
        width: 100px;
        height: 4px;
    }

    .connection-curve {
        width: 120px;
        height: 30px;
    }

    .animated-line,
    .curved-line {
        stroke: var(--primary);
        stroke-width: 2;
        opacity: 0.4;
        stroke-linecap: round;
        stroke-dasharray: 6 8;
        animation: lineFlow 2.5s linear infinite;
        filter: drop-shadow(0 0 6px rgba(0, 102, 255, 0.2));
    }

    /* Efecto de nodo presionado */
    .flow-node.pressed {
        transform: scale(0.95);
        border-color: var(--accent);
        box-shadow:
            0 0 0 4px rgba(0, 181, 226, 0.3),
            0 0 20px rgba(0, 181, 226, 0.6);
    }

    .flow-node.pressed::after {
        content: "";
        position: absolute;
        inset: -8px;
        border-radius: 20px;
        border: 2px solid var(--success);
        opacity: 0.8;
        animation: pressRing 0.4s ease-out;
    }

    @keyframes pressRing {
        from {
            opacity: 0.8;
            transform: scale(0.8);
            border-width: 3px;
        }
        to {
            opacity: 0;
            transform: scale(1.3);
            border-width: 1px;
        }
    }

    /* Línea de movimiento */
    .movement-trail {
        position: absolute;
        height: 3px;
        background: linear-gradient(
            90deg,
            var(--accent) 0%,
            var(--primary) 50%,
            var(--accent) 100%
        );
        border-radius: 2px;
        opacity: 0;
        z-index: 6;
        pointer-events: none;
        box-shadow: 0 0 8px rgba(0, 181, 226, 0.6);
        transition: opacity 0.3s ease;
    }

    .movement-trail.active {
        opacity: 1;
        animation: trailPulse 1s ease-in-out;
    }

    @keyframes trailPulse {
        0%,
        100% {
            transform: scaleY(1);
            box-shadow: 0 0 8px rgba(0, 181, 226, 0.6);
        }
        50% {
            transform: scaleY(1.5);
            box-shadow: 0 0 16px rgba(0, 181, 226, 0.8);
        }
    }

    /* Responsive */
    @media (max-width: 1024px) {
        .automation-flows {
            width: 60%;
        }

        .main-flow {
            right: 5%;
            gap: 1rem;
        }

        .connection-line {
            width: 60px;
        }
    }

    @media (max-width: 768px) {
        .automation-flows {
            width: 100%;
            opacity: 0.3;
        }

        .floating-node {
            display: none;
        }
    }
</style>

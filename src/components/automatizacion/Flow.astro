---
import FlowNode from "@components/shared/FlowNode.astro";
import RunnerBot from "./RunnerBot.astro";

export interface Props {}

const {} = Astro.props;
---

<div class="automation-flows">
    <!-- Flujo principal central -->
    <div class="flow-container main-flow">
        <FlowNode
            id="node-trigger"
            icon="⚡"
            label="Trigger"
            className="trigger-node"
            animateType="scale"
            animateDelay="0.3s"
        />

        <FlowNode
            id="node-ai"
            icon="🤖"
            label="AI Agent"
            className="ai-node"
            animateType="scale"
            animateDelay="0.9s"
        />

        <FlowNode
            id="node-action"
            icon="⚙️"
            label="Acción"
            className="action-node"
            animateType="scale"
            animateDelay="1.5s"
        />

        <FlowNode
            id="node-notify"
            icon="🔔"
            label="Notify"
            className="notify-node"
            animateType="scale"
            animateDelay="2.1s"
        />
    </div>

    <!-- Flujo secundario superior -->
    <div class="flow-container secondary-flow top-flow">
        <FlowNode
            id="node-email"
            icon="📧"
            label="Email"
            size="small"
            animateType="fade-up"
            animateDelay="0.5s"
        />

        <FlowNode
            id="node-chat"
            icon="💬"
            label="Chat"
            size="small"
            animateType="fade-up"
            animateDelay="0.8s"
        />
    </div>

    <!-- Flujo secundario inferior -->
    <div class="flow-container secondary-flow bottom-flow">
        <FlowNode
            id="node-crm"
            icon="📊"
            label="CRM"
            size="small"
            animateType="fade-up"
            animateDelay="0.7s"
        />

        <FlowNode
            id="node-api"
            icon="🔔"
            label="API"
            size="small"
            animateType="fade-up"
            animateDelay="1s"
        />
    </div>

    <!-- Nodos flotantes -->
    <div class="floating-nodes">
        <FlowNode
            id="node-pipeline"
            icon="🌐"
            label="Pipeline"
            className="floating-node node-1"
            animateType="scale"
            animateDelay="1.8s"
        />

        <FlowNode
            id="node-whatsapp"
            icon="📱"
            label="WhatsApp"
            className="floating-node node-2"
            animateType="scale"
            animateDelay="2.1s"
        />

        <FlowNode
            id="node-targeting"
            icon="🎯"
            label="Targeting"
            className="floating-node node-4"
            animateType="scale"
            animateDelay="2.7s"
        />

        <FlowNode
            id="node-forms"
            icon="📋"
            label="Forms"
            className="floating-node node-3"
            animateType="scale"
            animateDelay="2.4s"
        />
    </div>

    <!-- SVG dinámico para conexiones automáticas -->
    <svg
        id="dynamic-connections-svg"
        class="dynamic-connections-overlay"
        viewBox="0 0 100 100"
        preserveAspectRatio="none"
    >
        <!-- Las conexiones se generarán dinámicamente aquí -->
    </svg>
</div>

<RunnerBot />

<script>
    // Animación mejorada con conexiones dinámicas y runner bot
    document.addEventListener("DOMContentLoaded", () => {
        const heroContainer = document.querySelector(".automation-hero");
        const dynamicContainer = document.getElementById("dynamic-container");
        const runner = document.getElementById("runner");
        const dynamicSvg = document.getElementById("dynamic-connections-svg");

        if (!heroContainer || !dynamicContainer || !runner || !dynamicSvg)
            return;

        const flow = [
            "node-trigger",
            "node-ai",
            "node-action",
            "node-pipeline",
            "node-email",
            "node-pipeline",
            "node-chat",
            "node-action",
            "node-whatsapp",
            "node-crm",
            "node-api",
            "node-action",
            "node-targeting",
            "node-forms",
            "node-action",
            "node-notify",
            "node-trigger",
        ];

        const nodes = Object.fromEntries(
            flow
                .map((id) => [id, document.getElementById(id)])
                .filter(([id, el]) => el),
        );

        const getRect = (el: { getBoundingClientRect: () => any }) =>
            el.getBoundingClientRect();
        const getContainerRect = () => heroContainer.getBoundingClientRect();

        // CORREGIR: Función center mejorada
        const center = (el: any) => {
            const containerRect = getContainerRect();
            const elRect = getRect(el);
            return {
                x: elRect.left - containerRect.left + elRect.width / 2,
                y: elRect.top - containerRect.top + elRect.height / 2,
            };
        };

        // CORREGIR: Función mejorada para línea de movimiento
        let currentTrail: HTMLDivElement | null = null;

        const createMovementTrail = (fromNode: any, toNode: any) => {
            // Limpiar línea anterior
            if (currentTrail) {
                currentTrail.remove();
                currentTrail = null;
            }

            const fromPos = center(fromNode);
            const toPos = center(toNode);

            // Crear una línea simple con CSS
            const trail = document.createElement("div");
            trail.className = "movement-trail";

            // Calcular ángulo y distancia
            const dx = toPos.x - fromPos.x;
            const dy = toPos.y - fromPos.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const angle = (Math.atan2(dy, dx) * 180) / Math.PI;

            // Posicionar la línea
            trail.style.left = `${fromPos.x}px`;
            trail.style.top = `${fromPos.y}px`;
            trail.style.width = `${distance}px`;
            trail.style.transform = `rotate(${angle}deg)`;
            trail.style.transformOrigin = "0 50%";

            // CAMBIO CRÍTICO: Usar el contenedor dedicado
            dynamicContainer.appendChild(trail);
            currentTrail = trail;

            // Animar la línea
            setTimeout(() => trail.classList.add("active"), 10);

            return trail;
        };

        // ALTERNATIVA: Si el problema persiste, usar requestAnimationFrame para evitar reflows
        const safeAppendTrail = (trail: HTMLElement) => {
            requestAnimationFrame(() => {
                dynamicContainer.appendChild(trail);
                requestAnimationFrame(() => {
                    trail.classList.add("active");
                });
            });
        };

        // CORREGIR: Funciones del runner con mejor precisión
        const setRunnerPosition = (x: number, y: number) => {
            // CAMBIO: Usar left/top en lugar de transform3d para posicionamiento inicial
            runner.style.left = `${x}px`;
            runner.style.top = `${y}px`;
            runner.style.transform = `translate(-50%, -50%)`;
        };

        const setRunnerDirection = (dx: number, dy: number) => {
            const angle = Math.atan2(dy, dx);
            runner.style.setProperty("--rotation", `${angle}rad`);
        };

        const moveRunner = (fromId: string, toId: string, speed = 600) => {
            return new Promise<void>((resolve) => {
                const fromNode = nodes[fromId];
                const toNode = nodes[toId];
                if (!fromNode || !toNode) return resolve();

                // Crear línea de movimiento usando el método seguro
                const trail = createMovementTrail(fromNode, toNode);

                const fromPos = center(fromNode);
                const toPos = center(toNode);
                const dx = toPos.x - fromPos.x;
                const dy = toPos.y - fromPos.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                setRunnerDirection(dx, dy);

                const duration = Math.max(400, (distance / speed) * 1000);
                const startTime = performance.now();

                runner.classList.add("moving");

                const animate = (currentTime: number) => {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);

                    const eased =
                        progress < 0.5
                            ? 2 * progress * progress
                            : 1 - Math.pow(-2 * progress + 2, 3) / 2;

                    const currentX = fromPos.x + dx * eased;
                    const currentY = fromPos.y + dy * eased;

                    setRunnerPosition(currentX, currentY);

                    if (progress < 1) {
                        requestAnimationFrame(animate);
                    } else {
                        runner.classList.remove("moving");
                        // Ocultar línea después del movimiento
                        setTimeout(() => {
                            if (trail && trail.parentNode) {
                                trail.classList.remove("active");
                                // Remover después de la animación
                                setTimeout(() => {
                                    if (trail.parentNode) {
                                        trail.parentNode.removeChild(trail);
                                    }
                                }, 300);
                            }
                        }, 200);
                        resolve();
                    }
                };

                requestAnimationFrame(animate);
            });
        };

        const pressNode = async (nodeId: string) => {
            const node = nodes[nodeId];
            if (!node) return;

            node.classList.add("pressed");
            await new Promise((resolve) => setTimeout(resolve, 300));
            node.classList.remove("pressed");
        };

        // Sistema de conexiones refinado para mejor visualización
        const connections = [
            {
                from: "node-trigger",
                to: "node-ai",
                type: "line",
                importance: "primary",
            },
            {
                from: "node-ai",
                to: "node-action",
                type: "line",
                importance: "primary",
            },
            {
                from: "node-action",
                to: "node-notify",
                type: "line",
                importance: "primary",
            },
            {
                from: "node-action",
                to: "node-pipeline",
                type: "curve",
                importance: "primary",
            },
            {
                from: "node-pipeline",
                to: "node-email",
                type: "curve",
                importance: "secondary",
            },
            {
                from: "node-pipeline",
                to: "node-chat",
                type: "curve",
                importance: "secondary",
            },
            {
                from: "node-action",
                to: "node-whatsapp",
                type: "curve",
                importance: "secondary",
            },
            {
                from: "node-whatsapp",
                to: "node-crm",
                type: "curve",
                importance: "tertiary",
            },
            {
                from: "node-crm",
                to: "node-api",
                type: "line",
                importance: "tertiary",
            },
            {
                from: "node-action",
                to: "node-targeting",
                type: "curve",
                importance: "secondary",
            },
            {
                from: "node-targeting",
                to: "node-forms",
                type: "curve",
                importance: "tertiary",
            },
        ];

        // Función mejorada para crear conexiones con estética profesional y corrección de líneas rectas
        const createDynamicConnections = () => {
            dynamicSvg.innerHTML = "";
            const flowsContainer = document.querySelector(".automation-flows");
            const flowsRect = flowsContainer?.getBoundingClientRect();

            if (!flowsRect) return;

            // Ordenar conexiones por importancia para que las primarias estén encima
            const sortedConnections = [...connections].sort((a, b) => {
                const importanceOrder = {
                    primary: 3,
                    secondary: 2,
                    tertiary: 1,
                };
                return (
                    importanceOrder[b.importance] -
                    importanceOrder[a.importance]
                );
            });

            sortedConnections.forEach(
                ({ from, to, type, importance }, index) => {
                    const fromNode = document.getElementById(from);
                    const toNode = document.getElementById(to);

                    if (!fromNode || !toNode) return;

                    const fromRect = fromNode.getBoundingClientRect();
                    const toRect = toNode.getBoundingClientRect();

                    // Calcular dimensiones y centro de cada nodo
                    const fromWidth = fromRect.width;
                    const fromHeight = fromRect.height;
                    const toWidth = toRect.width;
                    const toHeight = toRect.height;

                    // Calcular posiciones relativas de los centros
                    const fromCenterX =
                        ((fromRect.left - flowsRect.left + fromWidth / 2) /
                            flowsRect.width) *
                        100;
                    const fromCenterY =
                        ((fromRect.top - flowsRect.top + fromHeight / 2) /
                            flowsRect.height) *
                        100;
                    const toCenterX =
                        ((toRect.left - flowsRect.left + toWidth / 2) /
                            flowsRect.width) *
                        100;
                    const toCenterY =
                        ((toRect.top - flowsRect.top + toHeight / 2) /
                            flowsRect.height) *
                        100;

                    // Calcular puntos de bordes para conexión en lugar de centro a centro
                    // Convertir ancho y alto a porcentaje del contenedor
                    const fromWidthPercent =
                        (fromWidth / flowsRect.width) * 100;
                    const fromHeightPercent =
                        (fromHeight / flowsRect.height) * 100;
                    const toWidthPercent = (toWidth / flowsRect.width) * 100;
                    const toHeightPercent = (toHeight / flowsRect.height) * 100;

                    // Calcular ángulo entre nodos para determinar punto de conexión en el borde
                    const dx = toCenterX - fromCenterX;
                    const dy = toCenterY - fromCenterY;
                    const angle = Math.atan2(dy, dx);

                    // Calcular puntos de inicio y fin en los bordes de los nodos
                    let fromX, fromY, toX, toY;

                    // Punto inicial (desde el borde del nodo de origen)
                    if (Math.abs(Math.cos(angle)) > Math.abs(Math.sin(angle))) {
                        // Conexión horizontal principalmente
                        fromX =
                            fromCenterX +
                            (Math.sign(dx) * fromWidthPercent) / 2;
                        fromY =
                            fromCenterY +
                            (Math.tan(angle) *
                                Math.sign(dx) *
                                fromWidthPercent) /
                                2;
                    } else {
                        // Conexión vertical principalmente
                        fromY =
                            fromCenterY +
                            (Math.sign(dy) * fromHeightPercent) / 2;
                        fromX =
                            fromCenterX +
                            (Math.sign(dy) * fromHeightPercent) /
                                2 /
                                Math.tan(angle);
                    }

                    // Punto final (hasta el borde del nodo destino)
                    if (Math.abs(Math.cos(angle)) > Math.abs(Math.sin(angle))) {
                        // Conexión horizontal principalmente
                        toX = toCenterX - (Math.sign(dx) * toWidthPercent) / 2;
                        toY =
                            toCenterY -
                            (Math.tan(angle) * Math.sign(dx) * toWidthPercent) /
                                2;
                    } else {
                        // Conexión vertical principalmente
                        toY = toCenterY - (Math.sign(dy) * toHeightPercent) / 2;
                        toX =
                            toCenterX -
                            (Math.sign(dy) * toHeightPercent) /
                                2 /
                                Math.tan(angle);
                    }

                    // Prevenir NaN o valores inválidos
                    if (
                        isNaN(fromX) ||
                        isNaN(fromY) ||
                        isNaN(toX) ||
                        isNaN(toY)
                    ) {
                        fromX = fromCenterX;
                        fromY = fromCenterY;
                        toX = toCenterX;
                        toY = toCenterY;
                    }

                    // Crear el grupo para contener la línea y el gradiente
                    const pathGroup = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "g",
                    );
                    pathGroup.setAttribute(
                        "class",
                        `path-group ${importance}-connection`,
                    );

                    // Crear la línea de conexión
                    const path = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "path",
                    );
                    let pathData = "";

                    // Generar el path según el tipo
                    if (type === "curve") {
                        // Para curvas, usar puntos de control para Bezier
                        const distance = Math.sqrt(
                            Math.pow(toX - fromX, 2) + Math.pow(toY - fromY, 2),
                        );
                        const curveFactor = Math.min(
                            Math.max(distance * 0.2, 10),
                            40,
                        );

                        // Ajustar dirección de la curvatura según posición relativa
                        let controlX1, controlY1, controlX2, controlY2;

                        if (fromCenterY > toCenterY) {
                            // Si el origen está abajo, curva hacia arriba
                            controlX1 = fromX + (toX - fromX) * 0.25;
                            controlY1 = fromY - curveFactor;
                            controlX2 = fromX + (toX - fromX) * 0.75;
                            controlY2 = toY - curveFactor;
                        } else {
                            // Si el origen está arriba, curva hacia abajo
                            controlX1 = fromX + (toX - fromX) * 0.25;
                            controlY1 = fromY + curveFactor;
                            controlX2 = fromX + (toX - fromX) * 0.75;
                            controlY2 = toY + curveFactor;
                        }

                        // Usar curva Bezier cúbica para más control sobre la forma
                        pathData = `M ${fromX} ${fromY} C ${controlX1} ${controlY1}, ${controlX2} ${controlY2}, ${toX} ${toY}`;
                    } else {
                        // Línea recta simple
                        pathData = `M ${fromX} ${fromY} L ${toX} ${toY}`;
                    }

                    path.setAttribute("id", `connection-path-${index}`);
                    path.setAttribute("d", pathData);
                    path.setAttribute(
                        "class",
                        `dynamic-connection-path ${importance}-path`,
                    );

                    // Ajustar grosor según importancia
                    const baseWidth =
                        importance === "primary"
                            ? 1.2
                            : importance === "secondary"
                              ? 0.8
                              : 0.5;
                    path.setAttribute("stroke-width", baseWidth.toString());
                    path.setAttribute(
                        "stroke",
                        "url(#lineGradient-" + index + ")",
                    );
                    path.setAttribute("fill", "none");

                    // Crear definiciones de gradiente para cada línea
                    const defs = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "defs",
                    );
                    const gradient = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "linearGradient",
                    );
                    gradient.setAttribute("id", "lineGradient-" + index);

                    // Ajustar el gradiente para seguir la dirección de la línea
                    if (fromX !== toX || fromY !== toY) {
                        const length = Math.sqrt(
                            Math.pow(toX - fromX, 2) + Math.pow(toY - fromY, 2),
                        );
                        const normX = (toX - fromX) / length;
                        const normY = (toY - fromY) / length;

                        gradient.setAttribute("x1", "0%");
                        gradient.setAttribute("y1", "0%");
                        gradient.setAttribute("x2", "100%");
                        gradient.setAttribute("y2", "0%");
                        gradient.setAttribute(
                            "gradientTransform",
                            `rotate(${(Math.atan2(normY, normX) * 180) / Math.PI}, 0.5, 0.5)`,
                        );
                    }

                    // Colores refinados según importancia
                    const colors = {
                        primary: ["#06ffa5", "#00b5e2"],
                        secondary: ["#00b5e2", "#0066ff"],
                        tertiary: ["#8b5cf6", "#5a5eeb"],
                    };

                    const [color1, color2] = colors[importance];

                    const stop1 = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "stop",
                    );
                    stop1.setAttribute("offset", "0%");
                    stop1.setAttribute("stop-color", color1);

                    const stop2 = document.createElementNS(
                        "http://www.w3.org/2000/svg",
                        "stop",
                    );
                    stop2.setAttribute("offset", "100%");
                    stop2.setAttribute("stop-color", color2);

                    gradient.appendChild(stop1);
                    gradient.appendChild(stop2);
                    defs.appendChild(gradient);
                    pathGroup.appendChild(defs);

                    // Añadir el path después del gradiente
                    pathGroup.appendChild(path);

                    // Solo añadir partículas a conexiones primarias y secundarias
                    if (importance !== "tertiary") {
                        // Crear partícula que se mueve a lo largo de la línea
                        const particle = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "circle",
                        );
                        particle.setAttribute(
                            "r",
                            importance === "primary" ? "0.9" : "0.6",
                        );
                        particle.setAttribute(
                            "fill",
                            importance === "primary" ? "#06ffa5" : "#00b5e2",
                        );
                        particle.setAttribute("class", "data-particle");

                        // Animación de movimiento
                        const animateMotion = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "animateMotion",
                        );
                        animateMotion.setAttribute(
                            "dur",
                            `${4 + Math.random() * 3}s`,
                        );
                        animateMotion.setAttribute("repeatCount", "indefinite");
                        animateMotion.setAttribute("begin", `${index * 0.3}s`);
                        animateMotion.setAttribute("calcMode", "spline");
                        animateMotion.setAttribute("keySplines", ".42,0,.58,1");

                        const mpath = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "mpath",
                        );
                        mpath.setAttribute("href", `#connection-path-${index}`);

                        animateMotion.appendChild(mpath);
                        particle.appendChild(animateMotion);
                        pathGroup.appendChild(particle);
                    }

                    dynamicSvg.appendChild(pathGroup);
                },
            );
        };

        // NUEVO: Actualizar conexiones dinámicas
        const updateDynamicConnections = () => {
            requestAnimationFrame(() => {
                createDynamicConnections();
            });
        };

        // CORREGIR: Loop principal simplificado
        const runFlowLoop = async () => {
            const firstNode = nodes[flow[0]];
            if (firstNode) {
                const pos = center(firstNode);
                setRunnerPosition(pos.x, pos.y);

                runner.style.opacity = "1";
                runner.style.visibility = "visible";

                // NUEVO: Crear conexiones dinámicas iniciales
                createDynamicConnections();

                await pressNode(flow[0]);
            }

            while (true) {
                for (let i = 0; i < flow.length - 1; i++) {
                    const fromId = flow[i];
                    const toId = flow[i + 1];

                    await moveRunner(fromId, toId);
                    await pressNode(toId);
                    await new Promise((resolve) => setTimeout(resolve, 300));
                }
            }
        };

        // Inicializar
        runFlowLoop();

        // NUEVO: Actualizar conexiones en resize
        let resizeTimeout: string | number | NodeJS.Timeout | undefined;
        window.addEventListener("resize", () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                const firstNode = nodes[flow[0]];
                if (firstNode) {
                    const pos = center(firstNode);
                    setRunnerPosition(pos.x, pos.y);
                }
                // Actualizar conexiones dinámicas
                updateDynamicConnections();
            }, 100);
        });

        // NUEVO: Observer para cambios en el layout
        const resizeObserver = new ResizeObserver(() => {
            updateDynamicConnections();
        });

        // Observar cambios en los nodos principales
        ["node-action", "node-email", "node-crm"].forEach((id) => {
            const element = document.getElementById(id);
            if (element) {
                resizeObserver.observe(element);
            }
        });
    });
</script>

<style>
    :root {
        --primary: #0066ff;
        --accent: #00b5e2;
        --success: #06ffa5;
        --tertiary: #8b5cf6;
    }

    /* Flujos de automatización */
    .automation-flows {
        position: absolute;
        top: 6em;
        right: 0;
        width: 60%;
        height: 80%;
        pointer-events: none;
        z-index: 5;
    }

    .flow-container {
        position: absolute;
        display: flex;
        align-items: center;
        gap: 2.5rem;
    }

    .main-flow {
        top: 45%;
        right: 25%;
        transform: translateY(-50%);
        transform: translateX(10%);
        flex-direction: row;
        gap: 3.5rem;
    }

    .top-flow {
        top: 20%;
        left: 65%;
        transform: translateY(-50%);
        flex-direction: row;
        gap: 3rem;
    }

    .bottom-flow {
        top: 75%;
        left: 50%;
        transform: translateY(-50%);
        transform: translateX(-20%);
        flex-direction: row;
        gap: 3rem;
    }

    /* SVG dinámico para conexiones */
    .dynamic-connections-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 4;
        overflow: visible;
    }

    /* Estilos refinados para las conexiones */
    .dynamic-connection-path {
        stroke-linecap: round;
        fill: none;
        filter: drop-shadow(0 0 1px rgba(0, 181, 226, 0.1));
        transition: all 0.8s ease;
        opacity: 0.8;
    }

    /* Estilos según importancia */
    .primary-path {
        stroke-dasharray: 8 4;
        animation: flowPrimary 30s linear infinite;
    }

    .secondary-path {
        stroke-dasharray: 6 4;
        opacity: 0.6;
        animation: flowSecondary 40s linear infinite;
    }

    .tertiary-path {
        stroke-dasharray: 2 4;
        opacity: 0.4;
        animation: flowTertiary 60s linear infinite;
    }

    @keyframes flowPrimary {
        to {
            stroke-dashoffset: -48;
        }
    }

    @keyframes flowSecondary {
        to {
            stroke-dashoffset: -40;
        }
    }

    @keyframes flowTertiary {
        to {
            stroke-dashoffset: -24;
        }
    }

    /* Partículas de datos mejoradas */
    .data-particle {
        filter: drop-shadow(0 0 2px currentColor);
        opacity: 0.7;
    }

    /* Línea de movimiento más elegante */
    .movement-trail {
        position: absolute;
        height: 2px;
        background: linear-gradient(
            90deg,
            transparent 0%,
            rgba(6, 255, 165, 0.2) 20%,
            rgba(6, 255, 165, 0.6) 50%,
            rgba(6, 255, 165, 0.2) 80%,
            transparent 100%
        );
        border-radius: 4px;
        opacity: 0;
        z-index: 6;
        pointer-events: none;
        transition: opacity 0.4s ease;
    }

    .movement-trail.active {
        opacity: 0.7;
    }

    /* Responsive refinado */
    @media (min-width: 1440px) {
        .automation-flows {
            width: 55%;
        }

        .main-flow {
            left: 8%;
            gap: 5rem;
        }

        .top-flow {
            left: 60%;
        }

        .bottom-flow {
            left: 45%;
        }

        .dynamic-connection-path.primary-path {
            stroke-width: 1.4 !important;
        }

        .dynamic-connection-path.secondary-path {
            stroke-width: 1 !important;
        }

        .dynamic-connection-path.tertiary-path {
            stroke-width: 0.7 !important;
        }
    }

    @media (min-width: 1024px) and (max-width: 1439px) {
        .automation-flows {
            width: 60%;
        }

        .main-flow {
            left: 5%;
            gap: 3.5rem;
        }

        .top-flow {
            left: 60%;
        }

        .bottom-flow {
            left: 45%;
        }
    }

    @media (max-width: 1024px) {
        .automation-flows {
            width: 65%;
        }

        .main-flow {
            left: 2%;
            gap: 2.5rem;
        }

        .top-flow {
            left: 50%;
            gap: 2rem;
        }

        .bottom-flow {
            left: 40%;
            gap: 2rem;
        }
    }

    @media (max-width: 768px) {
        .automation-flows {
            width: 100%;
            opacity: 0.8;
        }

        .floating-node {
            display: none;
        }

        .main-flow {
            left: 3%;
            gap: 1.8rem;
        }

        .top-flow {
            left: 45%;
            top: 18%;
            gap: 1.5rem;
        }

        .bottom-flow {
            left: 35%;
            top: 78%;
            gap: 1.5rem;
        }
    }

    /* Mejoras para accesibilidad */
    @media (prefers-reduced-motion: reduce) {
        .dynamic-connection-path {
            animation: none;
        }

        .data-particle animateMotion {
            animation-play-state: paused;
        }

        .movement-trail {
            animation: none;
        }
    }
</style>
